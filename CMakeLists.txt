CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
PROJECT(downloader)


SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

SET(CMAKE_C_STANDARD 11)
SET(CMAKE_C_STANDARD_REQUIRED ON)
SET(CMAKE_C_FLAGS "-std=gnu11")
SET(CMAKE_C_EXTENSIONS ON)

SET(CMAKE_CXX_STANDARD 11)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)
SET(CMAKE_CXX_FLAGS "-std=gnu++11")
SET(CMAKE_CXX_EXTENSIONS ON)

SET(CMAKE_BUILD_TYPE DEBUG)

SET(COMMON_FLAGS "-fstack-protector-strong -Wl,-z,relro \
                  -Os -Wall -Werror -fno-strict-aliasing -g -rdynamic")

SET(CMAKE_C_FLAGS ${COMMON_FLAGS})
SET(CMAKE_C_FLAGS_DEBUG ${COMMON_FLAGS})
SET(CMAKE_C_FLAGS_RELEASE ${COMMON_FLAGS})

SET(CMAKE_CXX_FLAGS ${COMMON_FLAGS})
SET(CMAKE_CXX_FLAGS_DEBUG ${COMMON_FLAGS})
SET(CMAKE_CXX_FLAGS_RELEASE ${COMMON_FLAGS})

FIND_PATH(ALSA_INCLUDE_DIR NAMES asoundlib.h
        PATH_SUFFIXES alsa
        DOC "The ALSA (asound) include directory"
        )

FIND_LIBRARY(ALSA_LIBRARY NAMES asound
        DOC "The ALSA (asound) library"
        )

INCLUDE(FindPackageHandleStandardArgs)
# handle the QUIETLY and REQUIRED arguments and set ALSA_FOUND to TRUE if
# all listed variables are TRUE
FIND_PACKAGE_HANDLE_STANDARD_ARGS(ALSA DEFAULT_MSG ALSA_LIBRARY ALSA_INCLUDE_DIR)

IF(ALSA_FOUND)
    MESSAGE("ALSA lib found.")
    SET(ALSA_LIBRARIES ${ALSA_LIBRARY})
    SET(ALSA_INCLUDE_DIRS ${ALSA_INCLUDE_DIR})
ENDIF()

MARK_AS_ADVANCED(ALSA_INCLUDE_DIR ALSA_LIBRARY)

INCLUDE_DIRECTORIES(${ALSA_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(inc)

LINK_DIRECTORIES(${ALSA_LIBRARIES})
LINK_LIBRARIES(asound)



LINK_LIBRARIES(-lpthread -lm)

SET(CMAKE_EXE_LINKER_FLAGS "-g -rdynamic")

AUX_SOURCE_DIRECTORY(src MAIN_DIR_SRCS)


ADD_EXECUTABLE( ${CMAKE_PROJECT_NAME}
        main.cpp
)